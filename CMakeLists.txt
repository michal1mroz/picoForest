# Gotta add valgrind and some other analysers for the projects.
# Could add tests
cmake_minimum_required(VERSION 3.26)

project(picoForest)
set(output_name ${PROJECT_NAME})

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "--std=c++17 -Wall -Wextra -pedantic")
set(COMPILER_DEBUG_FLAGS "-D_DEBUG")
set(LINKER_FLAGS "--std=c++17")
set(CMAKE_BUILD_TYPE Debug)

# Can modify the version if you wish...
find_package(OpenGL REQUIRED)
find_package(glfw3 3.3 REQUIRED)
find_package(GLEW REQUIRED)
find_package(glm REQUIRED)

# set output to build/
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)
set(EXECUTABLE_OUTPUT_PATH  ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})

file(GLOB_RECURSE sources
  "src/main.cpp"
  "src/display/*.cpp"
  "src/shaders/*.cpp"
  "src/meshes/*.cpp"
  "src/entity/*.cpp"
  "src/renderer/*.cpp"
  "src/MovableEntities/*.cpp"
)

add_executable(${output_name} ${sources})

target_link_libraries(${output_name} GLEW glfw glm OpenGL)

# Runs the project
add_custom_target(run
  COMMAND ${CMAKE_BINARY_DIR}/${output_name}
  DEPENDS ${output_name}
  COMMENT "Running project"
)

# Runs the project inside the gdb
add_custom_target(run_gdb
  COMMAND gdb ${CMAKE_BINARY_DIR}/${output_name}
  DEPENDS ${output_name}
  COMMENT "Running debug in gdb"
)

# Removes all the files generated by cmake and make
add_custom_target(clean_all
  COMMAND ${CMAKE_COMMAND} -E rm -r
    ${CMAKE_BINARY_DIR} CMakeFiles CMakeCache.txt cmake_install.cmake Makefile
  COMMENT "Cleaning generated files"
)
